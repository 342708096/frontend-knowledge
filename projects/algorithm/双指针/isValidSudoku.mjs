/*
 * @Author: zhuzheng013
 * @Date: 2022-05-20 15:22:55
 * @LastEditors: zhuzheng013
 * @LastEditTime: 2022-05-20 16:13:10
 * @Description: file content
 * @FilePath: /frontend-knowledge/projects/algorithm/双指针/isValidSudoku.mjs
 */
/**
 * 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 

注意：

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
空白格用 '.' 表示。
 

示例 1：


输入：board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：true
示例 2：

输入：board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：false
解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 

提示：

board.length == 9
board[i].length == 9
board[i][j] 是一位数字（1-9）或者 '.'

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/valid-sudoku
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */

import { defineArray } from "../递归/defineArray.mjs"

var isValidSudoku = function(board) {
  const rowMap = defineArray(0, 9, 9)
  const columnMap = defineArray(0, 9, 9)
  const subMap = defineArray(0, 3, 3, 9)
  for (let i=0; i< 9; i++) {
    for (let j=0; j<9; j++) {
      // 第i行 第j列 范围 1~9
      let item = board[i][j]
      if (item === '.') {
        continue
      }
      const index = item.charCodeAt() - '1'.charCodeAt()
      if (++rowMap[i][index] > 1) {
        return false
      }
      if (++columnMap[j][index] > 1) {
        return false
      }
      if (++subMap[(i/3) | 0][(j/3) | 0][index] > 1) {
        return false
      }
    }
  }
  return true
}

console.log(isValidSudoku(
  [
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
  ]
))
